/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    nf-core/circrna Nextflow config file
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Default config options for all compute environments
----------------------------------------------------------------------------------------
*/

// Global default params, used in configs
params {

    // Input options
    input                      = null
    outdir                     = null
    phenotype                  = null
    annotation                 = null
    mirna_expression           = null

    //> circRNA
    tools                      = 'circexplorer2'
    bsj_reads                  = 1
    max_shift                  = 1
    min_samples                = 1
    min_tools                  = 1
    exon_boundary              = 0
    save_intermediates         = false
    quantification_tools       = 'ciriquant,psirc'
    bootstrap_samples          = 30

    //> miRNA
    mirna_expression            = null
    mirna_min_reads             = 5
    mirna_min_sample_percentage = 0.2
    mirna_tools                 = 'miranda,targetscan'
    mirna_min_tools             = 1
    mirna_correlation           = 'pearson'

    // References
    genome                     = null
    igenomes_base              = 's3://ngi-igenomes/igenomes/'
    igenomes_ignore            = false
    bowtie                     = null
    bowtie2                    = null
    bwa                        = null
    star                       = null
    hisat2                     = null
    hisat2_build_memory        = '200.GB'
    segemehl                   = null
    save_reference             = true
    mature                     = null

    // Trimming
    min_trimmed_reads          = 10000
    clip_r1                    = null
    clip_r2                    = null
    three_prime_clip_r1        = null
    three_prime_clip_r2        = null
    trim_nextseq               = null
    save_trimmed               = false
    skip_trimming              = false

    // Alignment options

    //> STAR
    chimJunctionOverhangMin    = 10
    alignSJDBoverhangMin       = 10
    chimSegmentMin             = 10
    sjdboverhang               = 100
    limitSjdbInsertNsj         = 1000000

    //> MAPSPLICE
    seglen                     = 25
    min_intron                 = 20
    max_intron                 = 1000000
    min_map_len                = 40
    min_fusion_distance        = 200

    //> MISC
    save_unaligned             = false
    seq_center                 = null
    
    // MIRNA options

    //> MIRNA processing
    mirna_expression            = null
    mirna_min_reads             = 5
    mirna_min_sample_percentage = 0.2
    mirna_tools                 = 'miranda,targetscan,tarpmir'
    mirna_min_tools           = 1
    mirna_correlation           = 'pearson'

    //> TARPMIR options
    tarpmir_threads            = 12
    tarpmir_cut                = 0.8

    //> PITA options
    pita_lengths                = '6-8'
    pita_wobbles                = '6;0,7;1,8;1'
    pita_mismatches             = '6;0,7;0,8;1'

    //> SPONGE
    sponge_fdr                 = 0.01
    sponge_cpus                = 12
    sponge_f_test_pval         = 0.05
    sponge_coeff_threshold     = -0.05
    sponge_elastic_net         = true

    //> SPONGE_Effects
    sponge_ef_training           = 0.8
    sponge_ef_folds              = 10
    sponge_ef_mscor              = 0.1
    sponge_ef_fdr                = 0.05
    sponge_ef_enrichment_modules = 750
    sponge_ef_enrichment_bins    = 100
    sponge_ef_enrichment_min     = 60
    sponge_ef_enrichment_max     = 2000
    sponge_ef_enrichment_expr    = 10
    sponge_ef_enrichment_method  = "OE"

    // MultiQC options
    skip_fastqc                = false
    multiqc_config             = null
    multiqc_title              = null
    multiqc_logo               = null
    max_multiqc_email_size     = '25.MB'
    multiqc_methods_description = null

    // Boilerplate options
    publish_dir_mode           = 'copy'
    email                      = null
    email_on_fail              = null
    plaintext_email            = false
    monochrome_logs            = false
    hook_url                   = null
    help                       = false
    version                    = false

    // Config options
    config_profile_name        = null
    config_profile_description = null
    custom_config_version      = 'master'
    custom_config_base         = "https://raw.githubusercontent.com/nf-core/configs/${params.custom_config_version}"
    config_profile_contact     = null
    config_profile_url         = null

    // Max resource options
    max_memory                 = '300.GB'
    max_cpus                   = 50
    max_time                   = '240.h'

    test_data_base             = 'https://raw.githubusercontent.com/nf-core/test-datasets/circrna'

    // Schema validation default options
    validationFailUnrecognisedParams = false
    validationLenientMode            = false
    validationSchemaIgnoreParams     = 'genomes,igenomes_base,test_data_base'
    validationShowHiddenParams       = false
    validate_params                  = true
}

// Load base.config by default for all pipelines
includeConfig 'conf/base.config'

// Load nf-core custom profiles from different Institutions
try {
    includeConfig "${params.custom_config_base}/nfcore_custom.config"
} catch (Exception e) {
    System.err.println("WARNING: Could not load nf-core/config profiles: ${params.custom_config_base}/nfcore_custom.config")
}

// Load nf-core/circrna custom profiles from different institutions.
try {
    includeConfig "${params.custom_config_base}/pipeline/circrna.config"
} catch (Exception e) {
    System.err.println("WARNING: Could not load nf-core/config/circrna profiles: ${params.custom_config_base}/pipeline/circrna.config")
}
profiles {
    debug {
        dumpHashes              = true
        process.beforeScript    = 'echo $HOSTNAME'
        cleanup                 = false
        nextflow.enable.configProcessNamesValidation = true
    }
    conda {
        conda.enabled           = true
        docker.enabled          = false
        singularity.enabled     = false
        podman.enabled          = false
        shifter.enabled         = false
        charliecloud.enabled    = false
        conda.channels          = ['conda-forge', 'bioconda', 'defaults']
        apptainer.enabled       = false
    }
    mamba {
        conda.enabled           = true
        conda.useMamba          = true
        docker.enabled          = false
        singularity.enabled     = false
        podman.enabled          = false
        shifter.enabled         = false
        charliecloud.enabled    = false
        apptainer.enabled       = false
    }
    docker {
        docker.enabled          = true
        conda.enabled           = false
        singularity.enabled     = false
        podman.enabled          = false
        shifter.enabled         = false
        charliecloud.enabled    = false
        apptainer.enabled       = false
        docker.runOptions       = '-u $(id -u):$(id -g)'
    }
    arm {
        docker.runOptions       = '-u $(id -u):$(id -g) --platform=linux/amd64'
    }
    singularity {
        singularity.enabled     = true
        singularity.autoMounts  = true
        conda.enabled           = false
        docker.enabled          = false
        podman.enabled          = false
        shifter.enabled         = false
        charliecloud.enabled    = false
        apptainer.enabled       = false
    }
    podman {
        podman.enabled          = true
        conda.enabled           = false
        docker.enabled          = false
        singularity.enabled     = false
        shifter.enabled         = false
        charliecloud.enabled    = false
        apptainer.enabled       = false
    }
    shifter {
        shifter.enabled         = true
        conda.enabled           = false
        docker.enabled          = false
        singularity.enabled     = false
        podman.enabled          = false
        charliecloud.enabled    = false
        apptainer.enabled       = false
    }
    charliecloud {
        charliecloud.enabled    = true
        conda.enabled           = false
        docker.enabled          = false
        singularity.enabled     = false
        podman.enabled          = false
        shifter.enabled         = false
        apptainer.enabled       = false
    }
    apptainer {
        apptainer.enabled       = true
        apptainer.autoMounts    = true
        conda.enabled           = false
        docker.enabled          = false
        singularity.enabled     = false
        podman.enabled          = false
        shifter.enabled         = false
        charliecloud.enabled    = false
        apptainer.runOptions   = '--no-mount tmp --writable-tmpfs'
    }
    wave {
        apptainer.ociAutoPull   = true
        singularity.ociAutoPull = true
        wave.enabled            = true
        wave.freeze             = true
        wave.strategy           = 'conda,container'
    }
    gitpod {
        executor.name           = 'local'
        executor.cpus           = 4
        executor.memory         = 8.GB
    }
    test          { includeConfig 'conf/test.config'          }
    test_igenomes { includeConfig 'conf/test_igenomes.config' }
    full          { includeConfig 'conf/full.config'          }
    test_full     { includeConfig 'conf/test_full.config'     }
}

// Set default registry for Apptainer, Docker, Podman and Singularity independent of -profile
// Will not be used unless Apptainer / Docker / Podman / Singularity are enabled
// Set to your registry if you have a mirror of containers
apptainer.registry   = 'quay.io'
docker.registry      = 'quay.io'
podman.registry      = 'quay.io'
singularity.registry = 'quay.io'

// Nextflow plugins
plugins {
    id 'nf-validation@1.1.3' // Validation of pipeline parameters and creation of an input channel from a sample sheet
}

// Load igenomes.config if required
if (!params.igenomes_ignore) {
    includeConfig 'conf/igenomes.config'
} else {
    params.genomes = [:]
}
// Export these variables to prevent local Python/R libraries from conflicting with those in the container
// The JULIA depot path has been adjusted to a fixed path `/usr/local/share/julia` that needs to be used for packages in the container.
// See https://apeltzer.github.io/post/03-julia-lang-nextflow/ for details on that. Once we have a common agreement on where to keep Julia packages, this is adjustable.

env {
    PYTHONNOUSERSITE = 1
    R_PROFILE_USER   = "/.Rprofile"
    R_ENVIRON_USER   = "/.Renviron"
    JULIA_DEPOT_PATH = "/usr/local/share/julia"
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

// Disable process selector warnings by default. Use debug profile to enable warnings.
nextflow.enable.configProcessNamesValidation = false

def trace_timestamp = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')
timeline {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_timeline_${trace_timestamp}.html"
}
report {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_report_${trace_timestamp}.html"
}
trace {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_trace_${trace_timestamp}.txt"
}
dag {
    enabled = true
    file    = "${params.outdir}/pipeline_info/pipeline_dag_${trace_timestamp}.html"
}

manifest {
    name            = 'nf-core/circrna'
    author          = """Barry Digby"""
    homePage        = 'https://github.com/nf-core/circrna'
    description     = """Quantification, miRNA target prediction and differential expression analysis of circular RNAs"""
    mainScript      = 'main.nf'
    nextflowVersion = '!>=23.04.0'
    version         = 'dev'
    doi             = ''
}

// Load modules.config for DSL2 module specific options
includeConfig 'conf/modules.config'

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}
