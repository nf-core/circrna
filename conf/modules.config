/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]

    withName: CUSTOM_DUMPSOFTWAREVERSIONS {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            pattern: '*_versions.yml'
        ]
    }

    // TRIMMING courtesy of nf-core/rnaseq

    if (!params.skip_trimming) {
        process {
            withName: '.*:FASTQC_TRIMGALORE:TRIMGALORE' {
                ext.args   = {
                    [
                        "--fastqc_args '-t ${task.cpus}' ",
                        params.trim_nextseq > 0 ? "--nextseq ${params.trim_nextseq}" : ''
                    ].join(' ').trim()
                }
                publishDir = [
                    [
                        path: { "${params.outdir}/quality_control/trimgalore/fastqc" },
                        mode: params.publish_dir_mode,
                        pattern: "*.{html,zip}"
                    ],
                    [
                        path: { "${params.outdir}/quality_control/trimgalore" },
                        mode: params.publish_dir_mode,
                        pattern: "*.fq.gz",
                        enabled: params.save_trimmed
                    ],
                    [
                        path: { "${params.outdir}/quality_control/trimgalore" },
                        mode: params.publish_dir_mode,
                        pattern: "*.txt"
                    ]
                ]
            }
        }
    }

    // PREPARE GENOME
    withName: CLEAN_FASTA {
        ext.args2 = '\'/>/{ gsub(\$2, "",\$2);gsub(" ", "") };{print}\''
        publishDir = [
            path: { "${params.outdir}/references/clean_fasta" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_reference
        ]
    }

    withName: SEQKIT_SPLIT {
        ext.args = "-i --by-id-prefix \"\""
        publishDir = [
            path: { "${params.outdir}/references/chromosomes" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_reference
        ]
    }

    withName: BOWTIE_BUILD {
        ext.when = { !params.bowtie && params.tool.split(',').contains('mapsplice') }
        publishDir = [
            path: { "${params.outdir}/references/index" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_reference
        ]
    }

    withName: BOWTIE2_BUILD {
        ext.when = { !params.bowtie2 && params.tool.split(',').contains('find_circ') }
        publishDir = [
            path: { "${params.outdir}/references/index" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_reference
        ]
    }

    withName: BWA_INDEX {
        ext.when = { !params.bwa && params.tool.split(',').contains('ciriquant') }
        publishDir = [
            path: { "${params.outdir}/references/index" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_reference
        ]
    }

    withName: HISAT2_EXTRACTSPLICESITES {
        ext.when = { params.tool.split(',').contains('ciriquant') }
        publishDir = [
            path: { "${params.outdir}/references/index/hisat2" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_reference
        ]
    }

    withName: HISAT2_BUILD {
        ext.when = { params.tool.split(',').contains('ciriquant') }
        publishDir = [
            path: { "${params.outdir}/references/index" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_reference
        ]
    }

    withName: STAR_GENOMEGENERATE {
        ext.when = { !params.star && ( params.tool.split(',').contains('circexplorer2') || params.tool.split(',').contains('dcc') || params.tool.split(',').contains('circrna_finder') ) }
        ext.args = [ "",
            params.sjdboverhang ? "--sjdbOverhang ${params.sjdboverhang}" : '',
        ].join(' ').trim()
        publishDir = [
            path: { "${params.outdir}/references/index" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_reference
        ]
    }

    // circRNA

    withName: '.*:SEGEMEHL:INDEX' {
        publishDir = [
            path: { "${params.outdir}/references/index/segemehl" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_reference
        ]
    }

    withName: '.*:SEGEMEHL:ALIGN' {
        ext.args = [ "",
            "-b",
            "-S"
        ].join(' ').trim()
        publishDir = [
            path: { "${params.outdir}/circrna_discovery/segemehl/intermediates/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_intermediates
        ]
    }

    withName: '.*:SEGEMEHL:UNIFY' {
        // Keep only rows with ";C;" in column 4
        // Print $1 $2 $3 $1:$2-$3 $5 $6
        ext.args = "-v FS='\\t' -v OFS='\\t' '{ if (\$4 ~ /;C;/) { print \$1, \$2, \$3, \$1 \":\" \$2 \"-\" \$3 \":\" \$6, \$5, \$6 } }'"
        ext.suffix = "segemehl.bed"
        publishDir = [
            path: { "${params.outdir}/circrna_discovery/segemehl/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            pattern: "*.segemehl.bed"
        ]
    }

    withName: '.*:STAR2PASS:PASS_1' {
        ext.when = { params.tool.split(',').contains('circexplorer2') || params.tool.split(',').contains('circrna_finder') }
        ext.args = [ "",
            "--chimOutType Junctions WithinBAM",
            "--outSAMunmapped Within",
            "--outFilterType BySJout",
            "--outReadsUnmapped None",
            "--readFilesCommand zcat",
            "--alignSJDBoverhangMin ${params.alignSJDBoverhangMin}",
            "--limitSjdbInsertNsj ${params.limitSjdbInsertNsj}",
            "--chimJunctionOverhangMin ${params.chimJunctionOverhangMin}",
            "--chimSegmentMin ${params.chimSegmentMin}"
        ].join(' ').trim()
        publishDir = [
            path: { "${params.outdir}/circrna_discovery/star/1st_pass" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_intermediates
        ]
    }

    withName: '.*:STAR2PASS:SJDB' {
        publishDir = [
            path: { "${params.outdir}/circrna_discovery/star/sjdb" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_intermediates
        ]
    }

    withName: '.*:STAR2PASS:PASS_2' {
        ext.args = [ "",
            params.tool.split(',').contains('circrna_finder') ? "--chimOutType Junctions SeparateSAMold" : "--chimOutType Junctions WithinBAM",
            "--outSAMunmapped Within",
            "--outFilterType BySJout",
            "--outReadsUnmapped None",
            "--readFilesCommand zcat",
            "--sjdbFileChrStartEnd dataset.SJ.out.tab",
            "--alignSJDBoverhangMin ${params.alignSJDBoverhangMin}",
            "--limitSjdbInsertNsj ${params.limitSjdbInsertNsj}",
            "--chimJunctionOverhangMin ${params.chimJunctionOverhangMin}",
            "--chimSegmentMin ${params.chimSegmentMin}"
        ].join(' ').trim()
        publishDir = [
            path: { "${params.outdir}/circrna_discovery/star/2nd_pass" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_intermediates
        ]
    }

    withName: '.*:CIRCEXPLORER2:REFERENCE' {
        ext.args = [ "",
            "-genePredExt",
            "-geneNameAsName2"
        ].join(' ').trim()
        publishDir = [
            path: { "${params.outdir}/references/circexplorer2" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_reference
        ]
    }

    withName: '.*:CIRCEXPLORER2:PARSE' {
        publishDir = [
            path: { "${params.outdir}/circrna_discovery/circexplorer2/intermediates/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_intermediates
        ]
    }

    withName: '.*:CIRCEXPLORER2:ANNOTATE' {
        publishDir = [
            path: { "${params.outdir}/circrna_discovery/circexplorer2/intermediates/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_intermediates
        ]
    }

    withName: '.*:CIRCEXPLORER2:UNIFY' {
        ext.args = "-v FS='\\t' -v OFS='\\t' '{ print \$1, \$2, \$3, \$1 \":\" \$2 \"-\" \$3 \":\" \$6, \$13, \$6 }'"
        ext.suffix = "circexplorer2.bed"
        publishDir = [
            path: { "${params.outdir}/circrna_discovery/circexplorer2/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            pattern: "*.circexplorer2.bed"
        ]
    }

    withName: '.*:CIRCRNA_FINDER:MAIN' {
        publishDir = [
            path: { "${params.outdir}/circrna_discovery/circrna_finder/intermediates/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_intermediates,
            pattern: "*.bed"
        ]
    }

    withName: '.*:CIRCRNA_FINDER:UNIFY' {
        ext.args = "-v FS='\\t' -v OFS='\\t' '{ print \$1, \$2, \$3, \$1 \":\" \$2 \"-\" \$3 \":\" \$6, \$5, \$6 }'"
        ext.suffix = "circrna_finder.bed"
        publishDir = [
            path: { "${params.outdir}/circrna_discovery/circrna_finder/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            pattern: "*.circrna_finder.bed"
        ]
    }

    withName: '.*:FIND_CIRC:ALIGN' {
        ext.args = { "--very-sensitive --mm -D 20 --score-min=C,-15,0 -q " +
            (!meta.strandedness || meta.strandedness == 'unstranded' || meta.strandedness == 'auto' ? '' :
                meta.strandedness == 'forward' ? ' --norc' : ' --nofw') }
        publishDir = [
            path: { "${params.outdir}/circrna_discovery/find_circ/intermediates/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_intermediates
        ]
    }

    withName: '.*:FIND_CIRC:SAMTOOLS_VIEW' {
        ext.prefix = { "${meta.id}_unmapped" }
        ext.args = "-hf 4"
        publishDir = [
            path: { "${params.outdir}/circrna_discovery/find_circ/intermediates/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_intermediates
        ]
    }

    withName: '.*:FIND_CIRC:ANCHORS' {
        publishDir = [
            path: { "${params.outdir}/circrna_discovery/find_circ/intermediates/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_intermediates
        ]
    }

    withName: '.*:FIND_CIRC:MAIN' {
        ext.args = { !meta.strandedness || meta.strandedness == 'unstranded' || meta.strandedness == 'auto' ? '' :
                meta.strandedness == 'forward' ? ' --norc' : ' --nofw' }
        publishDir = [
            path: { "${params.outdir}/circrna_discovery/find_circ/intermediates/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_intermediates
        ]
    }

    withName: '.*:FIND_CIRC:UNIFY' {
        // Keep only rows with UNAMBIGUOUS_BP and ANCHOR_UNIQUE in $18
        ext.args = "-v FS='\\t' -v OFS='\\t' '{ if (\$18 ~ /UNAMBIGUOUS_BP/ && \$18 ~ /ANCHOR_UNIQUE/) { print \$1, \$2, \$3, \$1 \":\" \$2 \"-\" \$3 \":\" \$6, \$5, \$6 } }'"
        ext.suffix = "find_circ.bed"
        publishDir = [
            path: { "${params.outdir}/circrna_discovery/find_circ/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            pattern: "*.find_circ.bed"
        ]
    }

    withName: '.*:CIRIQUANT:MAIN' {
        publishDir = [
            path: { "${params.outdir}/circrna_discovery/ciriquant/intermediates/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_intermediates
        ]
    }

    withName: '.*:CIRIQUANT:UNIFY' {
        // Drop all rows starting with #
        // $count is $14 until the dot (never has decimals)
        // Print $1 $4 $5 $1:$4-$5:$7 $count $7
        ext.args = "-v OFS='\\t' '{ count = substr(\$14, 1, index(\$14, \".\") - 1); print \$1, \$4, \$5, \$1 \":\" \$4 \"-\" \$5 \":\" \$7, count, \$7 }'"
        ext.suffix = "ciriquant.bed"

        publishDir = [
            path: { "${params.outdir}/circrna_discovery/ciriquant/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            pattern: "*.ciriquant.bed"
        ]
    }

    withName: '.*:DCC:MATE1_1ST_PASS' {
        ext.prefix = { "${meta.id}_mate1" }
        ext.args = [ "",
            "--chimOutType Junctions WithinBAM",
            "--outSAMunmapped Within",
            "--outFilterType BySJout",
            "--outReadsUnmapped None",
            "--readFilesCommand zcat",
            "--alignSJDBoverhangMin ${params.alignSJDBoverhangMin}",
            "--limitSjdbInsertNsj ${params.limitSjdbInsertNsj}",
            "--chimJunctionOverhangMin ${params.chimJunctionOverhangMin}",
            "--chimSegmentMin ${params.chimSegmentMin}"
        ].join(' ').trim()
        publishDir = [
            path: { "${params.outdir}/circrna_discovery/dcc/intermediates/mate1/1st_pass" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_intermediates
        ]
    }

    withName: '.*:DCC:MATE1_SJDB' {
        publishDir = [
            path: { "${params.outdir}/circrna_discovery/dcc/intermediates/mate1/sjdb" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_intermediates
        ]
    }

    withName: '.*:DCC:MATE1_2ND_PASS' {
        ext.prefix = { "${meta.id}_mate1" }
        ext.args = [ "",
            "--chimOutType Junctions WithinBAM",
            "--outSAMunmapped Within",
            "--outFilterType BySJout",
            "--outReadsUnmapped None",
            "--readFilesCommand zcat",
            "--sjdbFileChrStartEnd dataset.SJ.out.tab",
            "--alignSJDBoverhangMin ${params.alignSJDBoverhangMin}",
            "--limitSjdbInsertNsj ${params.limitSjdbInsertNsj}",
            "--chimJunctionOverhangMin ${params.chimJunctionOverhangMin}",
            "--chimSegmentMin ${params.chimSegmentMin}"
        ].join(' ').trim()
        publishDir = [
            path: { "${params.outdir}/circrna_discovery/dcc/intermediates/mate1/2nd_pass" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_intermediates
        ]
    }

    withName: '.*:DCC:MATE2_1ST_PASS' {
        ext.prefix = { "${meta.id}_mate2" }
        ext.args = [ "",
            "--chimOutType Junctions WithinBAM",
            "--outSAMunmapped Within",
            "--outFilterType BySJout",
            "--outReadsUnmapped None",
            "--readFilesCommand zcat",
            "--alignSJDBoverhangMin ${params.alignSJDBoverhangMin}",
            "--limitSjdbInsertNsj ${params.limitSjdbInsertNsj}",
            "--chimJunctionOverhangMin ${params.chimJunctionOverhangMin}",
            "--chimSegmentMin ${params.chimSegmentMin}"
        ].join(' ').trim()
        publishDir = [
            path: { "${params.outdir}/circrna_discovery/dcc/intermediates/mate2/1st_pass" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_intermediates
        ]
    }

    withName: '.*:DCC:MATE2_SJDB' {
        publishDir = [
            path: { "${params.outdir}/circrna_discovery/dcc/intermediates/mate2/sjdb" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_intermediates
        ]
    }

    withName: '.*:DCC:MATE2_2ND_PASS' {
        ext.prefix = { "${meta.id}_mate2" }
        ext.args = [ "",
            "--chimOutType Junctions WithinBAM",
            "--outSAMunmapped Within",
            "--outFilterType BySJout",
            "--outReadsUnmapped None",
            "--readFilesCommand zcat",
            "--sjdbFileChrStartEnd dataset.SJ.out.tab",
            "--alignSJDBoverhangMin ${params.alignSJDBoverhangMin}",
            "--limitSjdbInsertNsj ${params.limitSjdbInsertNsj}",
            "--chimJunctionOverhangMin ${params.chimJunctionOverhangMin}",
            "--chimSegmentMin ${params.chimSegmentMin}"
        ].join(' ').trim()
        publishDir = [
            path: { "${params.outdir}/circrna_discovery/dcc/intermediates/mate2/2nd_pass" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_intermediates
        ]
    }

    withName: '.*:DCC:MAIN' {
        publishDir = [
            path: { "${params.outdir}/circrna_discovery/dcc/intermediates/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_intermediates
        ]
    }

    withName: '.*:DCC:UNIFY' {
        ext.args = "-v FS='\\t' -v OFS='\\t' '{ print \$1, \$2, \$3, \$1 \":\" \$2 \"-\" \$3 \":\" \$4, \$5, \$4 }'"
        ext.suffix = "dcc.bed"
        publishDir = [
            path: { "${params.outdir}/circrna_discovery/dcc/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            pattern: "*.dcc.bed"
        ]
    }

    withName: '.*:MAPSPLICE:REFERENCE' {
        ext.args = [ "",
            "-genePredExt",
            "-geneNameAsName2"
        ].join(' ').trim()
        publishDir = [
            path: { "${params.outdir}/references/mapsplice" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_reference
        ]
    }

    withName: '.*:MAPSPLICE:ALIGN' {
        ext.args = [ "",
            "--seglen ${params.seglen}",
            "--min-intron ${params.min_intron}",
            "--max-intron ${params.max_intron}",
            "--min-map-len ${params.min_map_len}",
            "--min-fusion-distance ${params.min_fusion_distance}",
            "--fusion-non-canonical"
        ].join(' ').trim()
        publishDir = [
            path: { "${params.outdir}/circrna_discovery/mapsplice/intermediates/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_intermediates
        ]
    }

    withName: '.*:MAPSPLICE:PARSE' {
        publishDir = [
            path: { "${params.outdir}/circrna_discovery/mapsplice/intermediates/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_intermediates
        ]
    }

    withName: '.*:MAPSPLICE:ANNOTATE' {
        publishDir = [
            path: { "${params.outdir}/circrna_discovery/mapsplice/intermediates/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_intermediates
        ]
    }

    withName: '.*:MAPSPLICE:UNIFY' {
        ext.args = "-v FS='\\t' -v OFS='\\t' '{ print \$1, \$2, \$3, \$1 \":\" \$2 \"-\" \$3 \":\" \$6, \$10, \$6 }'"
        ext.suffix = "mapsplice.bed"
        publishDir = [
            path: { "${params.outdir}/circrna_discovery/mapsplice/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            pattern: "*.mapsplice.bed"
        ]
    }

    withName: 'FILTER_BSJS' {
        // Make sure score is higher or equal to the threshold
        ext.args = { "-v FS='\\t' -v OFS='\\t' '{ if (\$5 >= ${params.bsj_reads}) { print } }'" }
        ext.suffix = {"${meta.tool}.filtered.bed"}
    }

    withName: UPSET_SAMPLES {
        ext.when = { params.tool.split(',').length > 1 }
    }

    withName: UPSET_ALL {
        ext.when = { params.tool.split(',').length > 1 }
    }

    withName: '.*:ANNOTATION:INTERSECT_GTF' {
        ext.args = "-loj"
        ext.suffix = "intersect.bed"
    }

    withName: '.*:ANNOTATION:INGEST_DATABASE_NAMES' {
        ext.args = { "-v FS='\\t' -v OFS='\\t' '{ print \$1, \$2, \$3, \"${meta.id}:\" \$4, \$5, \$6 }'" }
        ext.suffix = "named.bed"
    }

    withName: '.*:ANNOTATION:INTERSECT_DATABASE' {
        ext.args = { "-f ${meta.min_overlap} -r -loj -wa -wb" }
        ext.suffix = "annotated.bed"
    }

    withName: '.*:ANNOTATION:COMBINE_BEDS' {
        ext.args = "-k 1,1 -k2,2n -k3,3n -u"
        ext.suffix = "combined.bed"
    }

    withName: '.*:ANNOTATION:COMBINE_GTFS' {
        ext.args = "-k 1,1 -k4,4n -k5,5n -u"
        ext.suffix = "combined.gtf"
    }

    withName: '.*:ANNOTATION:REMOVE_SCORE_STRAND' {
        ext.args = "-v FS='\\t' -v OFS='\\t' '{ print \$1, \$2, \$3, \$1 \":\" \$2 \"-\" \$3, \".\", \".\", \$7, \$8, \$9, \$10, \$11 }'"
        ext.suffix = "tidy.bed"
    }

    withName: ADD_BACKSPLICE {
        ext.args = "'{ if (/^>/) { print \$0 } else { start = substr(\$0, 1, 25); print \$0 start } }'"
        ext.suffix = "backspliced.fa"
        publishDir = [
            path: { "${params.outdir}/circrna_discovery/${meta.tool}/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            pattern: "*.fasta"
        ]
    }

    withName: COUNTS_COMBINED {
        ext.when = { params.module.split(',').contains('circrna_discovery') }
    }

    withName: COUNTS_TO_BED {
        ext.args = "-v FS='\\t' -v OFS='\\t' 'NR>1 { print \$1, \$2, \$3, \$1 \":\" \$2 \"-\" \$3, \".\", \".\" }'"
        ext.suffix = "bed"
    }

    withName: UNIQUE_REGIONS {
        ext.args = "-k 1,1 -k2,2n -k3,3n -u"
        ext.suffix = "unique.bed"
    }

    withName: '.*:CIRCRNA_DISCOVERY_BENCHMARKING:ANNOTATION:REMOVE_SCORE_STRAND' {
        ext.suffix = "_benchmarking.tidy.bed"
    }

    withName: COMBINE_TRANSCRIPTOME_GTFS {
        ext.args = "-k 1,1 -k4,4n -k5,5n"
        ext.suffix = "gtf"
    }

    withName: EXCLUDE_OVERLONG_TRANSCRIPTS {
        ext.args = "-v FS='\\t' -v OFS='\\t' '\$5-\$4 <= 10000 { print }'"
        ext.suffix = "filtered.gtf"
    }

    withName: MARK_CIRCULAR {
        // GAWK process that marks FASTA headers.
        // Leaves headers starting with "ENS" and non-header lines as is.
        // Adds "\tC" to the end of the header for all other headers
        ext.args = "-v FS='\\t' -v OFS='\\t' '{ if (!/^>circ_/) { print } else { print \$1 \"\\tC\" } }'"
        ext.suffix = "marked.fasta"
    }

    withName: ".*:JOIN_(GENE|TX)_(COUNTS|TPM)" {
        ext.args = "-f 1,2 -t"
        label = "process_medium"
        maxRetries = 3
        publishDir = [
            path: { "${params.outdir}/quantification/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: ".*:SPLIT_TYPES_(COUNTS|TPM)" {
        publishDir = [
            path: { "${params.outdir}/quantification/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: TARGETSCAN_DATABASE {
        publishDir = [
            path: { "${params.outdir}/references/targetscan" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            pattern: "mature.txt"
        ]
    }

    withName: TARGETSCAN {
        ext.prefix = { "${meta.id}.targetscan" }
        publishDir = [
            path: { "${params.outdir}/mirna_prediction/targetscan" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            pattern: "*.txt"
        ]
    }

    withName: MIRANDA {
        ext.prefix = { "${meta.id}.miranda" }
        ext.args = "-strict"
        publishDir = [
            path: { "${params.outdir}/mirna_prediction/miranda" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            pattern: "*.txt"
        ]
    }

    withName: MIRNA_TARGETS {
        publishDir = [
            path: { "${params.outdir}/mirna_prediction/${meta.tool}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            pattern: "*.txt"
        ]
    }
}
