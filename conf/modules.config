/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]

    withName: SAMPLESHEET_CHECK {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: CUSTOM_DUMPSOFTWAREVERSIONS {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            pattern: '*_versions.yml'
        ]
    }

    // TRIMMING courtesy of nf-core/rnaseq

if (!params.skip_trimming) {
    process {
        withName: '.*:FASTQC_TRIMGALORE:TRIMGALORE' {
            ext.args   = {
                [
                    "--fastqc_args '-t ${task.cpus}' ",
                    params.trim_nextseq > 0 ? "--nextseq ${params.trim_nextseq}" : ''
                ].join(' ').trim()
            }
            publishDir = [
                [
                    path: { "${params.outdir}/quality_control/trimgalore/fastqc" },
                    mode: params.publish_dir_mode,
                    pattern: "*.{html,zip}"
                ],
                [
                    path: { "${params.outdir}/quality_control/trimgalore" },
                    mode: params.publish_dir_mode,
                    pattern: "*.fq.gz",
                    enabled: params.save_trimmed
                ],
                [
                    path: { "${params.outdir}/quality_control/trimgalore" },
                    mode: params.publish_dir_mode,
                    pattern: "*.txt"
                ]
            ]
        }
    }
}

    // PREPARE GENOME
    withName: BOWTIE_BUILD {
        ext.when = { params.fasta && !params.bowtie && params.tool.split(',').contains('mapsplice') && params.module.split(',').contains('circrna_discovery') }
        publishDir = [
            path: { "${params.outdir}/references/index" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_reference
        ]
    }

    withName: BOWTIE2_BUILD {
        ext.when = { params.fasta && !params.bowtie2 && params.tool.split(',').contains('find_circ') && params.module.split(',').contains('circrna_discovery') }
        publishDir = [
            path: { "${params.outdir}/references/index" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_reference
        ]
    }

    withName: BWA_INDEX {
        ext.when = { params.fasta && !params.bwa && params.tool.split(',').contains('ciriquant') && params.module.split(',').contains('circrna_discovery') }
        publishDir = [
            path: { "${params.outdir}/references/index" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_reference
        ]
    }

    withName: HISAT2_EXTRACTSPLICESITES {
        ext.when = { params.fasta && params.gtf && ( params.module.split(',').contains('differential_expression') || params.tool.split(',').contains('ciriquant') ) }
        publishDir = [
            path: { "${params.outdir}/references/index/hisat2" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_reference
        ]
    }

    withName: HISAT2_BUILD {
        ext.when = { params.fasta && params.gtf && ( params.module.split(',').contains('differential_expression') || params.tool.split(',').contains('ciriquant') ) }
        publishDir = [
            path: { "${params.outdir}/references/index" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_reference
        ]
    }

    withName: STAR_GENOMEGENERATE {
        ext.when = { params.fasta && params.gtf && !params.star && params.module.split(',').contains('circrna_discovery') && ( params.tool.split(',').contains('circexplorer2') || params.tool.split(',').contains('dcc') || params.tool.split(',').contains('circrna_finder') ) }
        ext.args = [ "",
            params.sjdboverhang ? "--sjdbOverhang ${params.sjdboverhang}" : '',
        ].join(' ').trim()
        publishDir = [
            path: { "${params.outdir}/references/index" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_reference
        ]
    }

    withName: SEGEMEHL_INDEX {
        ext.when = { params.fasta && !params.segemehl && params.tool.split(',').contains('segemehl') && params.module.split(',').contains('circrna_discovery') }
        publishDir = [
            path: { "${params.outdir}/references/index/segemehl" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_reference
        ]
    }

    // circRNA

    withName: SEGEMEHL_ALIGN {
        ext.when = { params.fasta && params.tool.split(',').contains('segemehl') && params.module.split(',').contains('circrna_discovery') }
        ext.args = [ "",
            "-b",
            "-S"
        ].join(' ').trim()
        publishDir = [
            path: { "${params.outdir}/circrna_discovery/segemehl/intermediates/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_intermediates
        ]
    }

    withName: SEGEMEHL_FILTER {
        ext.when = { params.tool.split(',').contains('segemehl') && params.module.split(',').contains('circrna_discovery') }
        publishDir = [
            path: { "${params.outdir}/circrna_discovery/segemehl/intermediates/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_intermediates,
            pattern: "*circs.bed"
        ]
    }

    withName: STAR_1ST_PASS {
        ext.when = { params.module.split(',').contains('circrna_discovery') && ( params.tool.split(',').contains('circexplorer2') || params.tool.split(',').contains('circrna_finder') ) }
        ext.args = [ "",
            "--chimOutType Junctions WithinBAM",
            "--outSAMunmapped Within",
            "--outFilterType BySJout",
            "--outReadsUnmapped None",
            "--readFilesCommand zcat",
            "--alignSJDBoverhangMin ${params.alignSJDBoverhangMin}",
            "--chimJunctionOverhangMin ${params.chimJunctionOverhangMin}",
            "--chimSegmentMin ${params.chimSegmentMin}"
        ].join(' ').trim()
        publishDir = [
            path: { "${params.outdir}/circrna_discovery/star/1st_pass" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_intermediates
        ]
    }

    withName: STAR_SJDB {
        ext.when = { params.module.split(',').contains('circrna_discovery') && ( params.tool.split(',').contains('circexplorer2') || params.tool.split(',').contains('circrna_finder') ) }
        publishDir = [
            path: { "${params.outdir}/circrna_discovery/star/sjdb" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_intermediates
        ]
    }

    withName: STAR_2ND_PASS {
        ext.when = { params.module.split(',').contains('circrna_discovery') && ( params.tool.split(',').contains('circexplorer2') || params.tool.split(',').contains('circrna_finder') ) }
        ext.args = [ "",
            params.tool.split(',').contains('circrna_finder') ? "--chimOutType Junctions SeparateSAMold" : "--chimOutType Junctions WithinBAM",
            "--outSAMunmapped Within",
            "--outFilterType BySJout",
            "--outReadsUnmapped None",
            "--readFilesCommand zcat",
            "--sjdbFileChrStartEnd dataset.SJ.out.tab",
            "--alignSJDBoverhangMin ${params.alignSJDBoverhangMin}",
            "--chimJunctionOverhangMin ${params.chimJunctionOverhangMin}",
            "--chimSegmentMin ${params.chimSegmentMin}"
        ].join(' ').trim()
        publishDir = [
            path: { "${params.outdir}/circrna_discovery/star/2nd_pass" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_intermediates
        ]
    }

    withName: CIRCEXPLORER2_REF {
        ext.when = { params.module.split(',').contains('circrna_discovery') && params.tool.split(',').contains('circexplorer2') }
        ext.args = [ "",
            "-genePredExt",
            "-geneNameAsName2"
        ].join(' ').trim()
        publishDir = [
            path: { "${params.outdir}/references/circexplorer2" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_reference
        ]
    }

    withName: CIRCEXPLORER2_PAR {
        ext.when = { params.module.split(',').contains('circrna_discovery') && params.tool.split(',').contains('circexplorer2') }
        publishDir = [
            path: { "${params.outdir}/circrna_discovery/circexplorer2/intermediates/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_intermediates
        ]
    }

    withName: CIRCEXPLORER2_ANN {
        ext.when = { params.module.split(',').contains('circrna_discovery') && params.tool.split(',').contains('circexplorer2') }
        publishDir = [
            path: { "${params.outdir}/circrna_discovery/circexplorer2/intermediates/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_intermediates
        ]
    }

    withName: CIRCEXPLORER2_FLT {
        ext.when = { params.module.split(',').contains('circrna_discovery') && params.tool.split(',').contains('circexplorer2') }
        publishDir = [
            path: { "${params.outdir}/circrna_discovery/circexplorer2/intermediates/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_intermediates,
            pattern: "*circs.bed"
        ]
    }

    withName: CIRCRNA_FINDER_FILTER {
        ext.when = { params.module.split(',').contains('circrna_discovery') && params.tool.split(',').contains('circrna_finder') }
        publishDir = [
            path: { "${params.outdir}/circrna_discovery/circrna_finder/intermediates/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_intermediates,
            pattern: "*circs.bed"
        ]
    }

    withName: FIND_CIRC_ALIGN {
        ext.when = { params.module.split(',').contains('circrna_discovery') && params.tool.split(',').contains('find_circ') }
        ext.args = [ "",
            "--very-sensitive",
            "--mm",
            "-D 20",
            "--score-min=C,-15,0",
            "-q"
            ].join(' ').trim()
        publishDir = [
            path: { "${params.outdir}/circrna_discovery/find_circ/intermediates/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_intermediates
        ]
    }

    withName: SAMTOOLS_VIEW {
        ext.when = { params.module.split(',').contains('circrna_discovery') && params.tool.split(',').contains('find_circ') }
        ext.prefix = { "${meta.id}_unmapped" }
        ext.args = "-hf 4"
        publishDir = [
            path: { "${params.outdir}/circrna_discovery/find_circ/intermediates/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_intermediates
        ]
    }

    withName: FIND_CIRC_ANCHORS {
        ext.when = { params.module.split(',').contains('circrna_discovery') && params.tool.split(',').contains('find_circ') }
        publishDir = [
            path: { "${params.outdir}/circrna_discovery/find_circ/intermediates/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_intermediates
        ]
    }

    withName: FIND_CIRC {
        ext.when = { params.module.split(',').contains('circrna_discovery') && params.tool.split(',').contains('find_circ') }
        publishDir = [
            path: { "${params.outdir}/circrna_discovery/find_circ/intermediates/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_intermediates
        ]
    }

    withName: FIND_CIRC_FILTER {
        ext.when = { params.module.split(',').contains('circrna_discovery') && params.tool.split(',').contains('find_circ') }
        publishDir = [
            path: { "${params.outdir}/circrna_discovery/find_circ/intermediates/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_intermediates,
            pattern: "*circs.bed"
        ]
    }

    withName: CIRIQUANT_YML {
        ext.when = { params.module.split(',').contains('circrna_discovery') && params.tool.split(',').contains('ciriquant') }
        publishDir = [
            path: { "${params.outdir}/references/ciriquant" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_reference
        ]
    }

    withName: CIRIQUANT {
        ext.when = { params.module.split(',').contains('circrna_discovery') && params.tool.split(',').contains('ciriquant') }
        publishDir = [
            path: { "${params.outdir}/circrna_discovery/ciriquant/intermediates/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_intermediates
        ]
    }

    withName: CIRIQUANT_FILTER {
        ext.when = { params.module.split(',').contains('circrna_discovery') && params.tool.split(',').contains('ciriquant') }
        publishDir = [
            path: { "${params.outdir}/circrna_discovery/ciriquant/intermediates/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_intermediates,
            pattern: "*circs.bed"
        ]
    }

    withName: DCC_1ST_PASS {
        ext.when = { params.module.split(',').contains('circrna_discovery') && params.tool.split(',').contains('dcc') }
        ext.args = [ "",
            "--chimOutType Junctions WithinBAM",
            "--outSAMunmapped Within",
            "--outFilterType BySJout",
            "--outReadsUnmapped None",
            "--readFilesCommand zcat",
            "--alignSJDBoverhangMin ${params.alignSJDBoverhangMin}",
            "--chimJunctionOverhangMin ${params.chimJunctionOverhangMin}",
            "--chimSegmentMin ${params.chimSegmentMin}"
        ].join(' ').trim()
        publishDir = [
            path: { "${params.outdir}/circrna_discovery/dcc/intermediates/align/1st_pass" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_intermediates
        ]
    }

    withName: DCC_SJDB {
        ext.when = { params.module.split(',').contains('circrna_discovery') && params.tool.split(',').contains('dcc') }
        publishDir = [
            path: { "${params.outdir}/circrna_discovery/dcc/intermediates/align/sjdb" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_intermediates
        ]
    }

    withName: DCC_2ND_PASS {
        ext.when = { params.module.split(',').contains('circrna_discovery') && params.tool.split(',').contains('dcc') }
        ext.args = [ "",
            "--chimOutType Junctions WithinBAM",
            "--outSAMunmapped Within",
            "--outFilterType BySJout",
            "--outReadsUnmapped None",
            "--readFilesCommand zcat",
            "--sjdbFileChrStartEnd dataset.SJ.out.tab",
            "--alignSJDBoverhangMin ${params.alignSJDBoverhangMin}",
            "--chimJunctionOverhangMin ${params.chimJunctionOverhangMin}",
            "--chimSegmentMin ${params.chimSegmentMin}"
        ].join(' ').trim()
        publishDir = [
            path: { "${params.outdir}/circrna_discovery/dcc/intermediates/align/2nd_pass" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_intermediates
        ]
    }

    withName: DCC_MATE1_1ST_PASS {
        ext.when = { params.module.split(',').contains('circrna_discovery') && params.tool.split(',').contains('dcc') }
        ext.prefix = { "${meta.id}_mate1" }
        ext.args = [ "",
            "--chimOutType Junctions WithinBAM",
            "--outSAMunmapped Within",
            "--outFilterType BySJout",
            "--outReadsUnmapped None",
            "--readFilesCommand zcat",
            "--alignSJDBoverhangMin ${params.alignSJDBoverhangMin}",
            "--chimJunctionOverhangMin ${params.chimJunctionOverhangMin}",
            "--chimSegmentMin ${params.chimSegmentMin}"
        ].join(' ').trim()
        publishDir = [
            path: { "${params.outdir}/circrna_discovery/dcc/intermediates/mate1/1st_pass" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_intermediates
        ]
    }

    withName: DCC_MATE1_SJDB {
        ext.when = { params.module.split(',').contains('circrna_discovery') && params.tool.split(',').contains('dcc') }
        publishDir = [
            path: { "${params.outdir}/circrna_discovery/dcc/intermediates/mate1/sjdb" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_intermediates
        ]
    }

    withName: DCC_MATE1_2ND_PASS {
        ext.when = { params.module.split(',').contains('circrna_discovery') && params.tool.split(',').contains('dcc') }
        ext.prefix = { "${meta.id}_mate1" }
        ext.args = [ "",
            "--chimOutType Junctions WithinBAM",
            "--outSAMunmapped Within",
            "--outFilterType BySJout",
            "--outReadsUnmapped None",
            "--readFilesCommand zcat",
            "--sjdbFileChrStartEnd dataset.SJ.out.tab",
            "--alignSJDBoverhangMin ${params.alignSJDBoverhangMin}",
            "--chimJunctionOverhangMin ${params.chimJunctionOverhangMin}",
            "--chimSegmentMin ${params.chimSegmentMin}"
        ].join(' ').trim()
        publishDir = [
            path: { "${params.outdir}/circrna_discovery/dcc/intermediates/mate1/2nd_pass" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_intermediates
        ]
    }

    withName: DCC_MATE2_1ST_PASS {
        ext.when = { params.module.split(',').contains('circrna_discovery') && params.tool.split(',').contains('dcc') }
        ext.prefix = { "${meta.id}_mate2" }
        ext.args = [ "",
            "--chimOutType Junctions WithinBAM",
            "--outSAMunmapped Within",
            "--outFilterType BySJout",
            "--outReadsUnmapped None",
            "--readFilesCommand zcat",
            "--alignSJDBoverhangMin ${params.alignSJDBoverhangMin}",
            "--chimJunctionOverhangMin ${params.chimJunctionOverhangMin}",
            "--chimSegmentMin ${params.chimSegmentMin}"
        ].join(' ').trim()
        publishDir = [
            path: { "${params.outdir}/circrna_discovery/dcc/intermediates/mate2/1st_pass" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_intermediates
        ]
    }

    withName: DCC_MATE2_SJDB {
        ext.when = { params.module.split(',').contains('circrna_discovery') && params.tool.split(',').contains('dcc') }
        publishDir = [
            path: { "${params.outdir}/circrna_discovery/dcc/intermediates/mate2/sjdb" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_intermediates
        ]
    }

    withName: DCC_MATE2_2ND_PASS {
        ext.when = { params.module.split(',').contains('circrna_discovery') && params.tool.split(',').contains('dcc') }
        ext.prefix = { "${meta.id}_mate2" }
        ext.args = [ "",
            "--chimOutType Junctions WithinBAM",
            "--outSAMunmapped Within",
            "--outFilterType BySJout",
            "--outReadsUnmapped None",
            "--readFilesCommand zcat",
            "--sjdbFileChrStartEnd dataset.SJ.out.tab",
            "--alignSJDBoverhangMin ${params.alignSJDBoverhangMin}",
            "--chimJunctionOverhangMin ${params.chimJunctionOverhangMin}",
            "--chimSegmentMin ${params.chimSegmentMin}"
        ].join(' ').trim()
        publishDir = [
            path: { "${params.outdir}/circrna_discovery/dcc/intermediates/mate2/2nd_pass" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_intermediates
        ]
    }

    withName: DCC {
        ext.when = { params.tool.split(',').contains('dcc') && params.module.split(',').contains('circrna_discovery') }
        publishDir = [
            path: { "${params.outdir}/circrna_discovery/dcc/intermediates/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_intermediates
        ]
    }

    withName: MAPSPLICE_REFERENCE {
        ext.when = { params.module.split(',').contains('circrna_discovery') && params.tool.split(',').contains('mapsplice') }
        ext.args = [ "",
            "-genePredExt",
            "-geneNameAsName2"
        ].join(' ').trim()
        publishDir = [
            path: { "${params.outdir}/references/mapsplice" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_reference
        ]
    }

    withName: MAPSPLICE_ALIGN {
        ext.when = { params.module.split(',').contains('circrna_discovery') && params.tool.split(',').contains('mapsplice') }
        ext.args = [ "",
            "--seglen ${params.seglen}",
            "--min-intron ${params.min_intron}",
            "--max-intron ${params.max_intron}",
            "--min-map-len ${params.min_map_len}",
            "--min-fusion-distance ${params.min_fusion_distance}",
            "--fusion-non-canonical"
        ].join(' ').trim()
        publishDir = [
            path: { "${params.outdir}/circrna_discovery/mapsplice/intermediates/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_intermediates
        ]
    }

    withName: MAPSPLICE_PARSE {
        ext.when = { params.module.split(',').contains('circrna_discovery') && params.tool.split(',').contains('mapsplice') }
        publishDir = [
            path: { "${params.outdir}/circrna_discovery/mapsplice/intermediates/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_intermediates
        ]
    }

    withName: MAPSPLICE_ANNOTATE {
        ext.when = { params.module.split(',').contains('circrna_discovery') && params.tool.split(',').contains('mapsplice') }
        publishDir = [
            path: { "${params.outdir}/circrna_discovery/mapsplice/intermediates/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_intermediates
        ]
    }

    withName: MAPSPLICE_FILTER {
        ext.when = { params.module.split(',').contains('circrna_discovery') && params.tool.split(',').contains('mapsplice') }
        publishDir = [
            path: { "${params.outdir}/circrna_discovery/mapsplice/intermediates/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_intermediates,
            pattern: "*circs.bed"
        ]
    }

    withName: REMOVE_HEADER {
        ext.args = "'{if (NR>1) {print}}'"
        ext.suffix = "tsv"
    }

    withName: ANNOTATION {
        publishDir = [
            path: { "${params.outdir}/circrna_discovery/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: SORT_ANNOTATION {
        ext.suffix = "sorted.bed"
    }

    withName: FASTA {
        ext.when = { params.module.split(',').contains('circrna_discovery') }
        publishDir = [
            path: { "${params.outdir}/circrna_discovery/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            pattern: "*.fasta"
        ]
    }

    withName: PSIRC_COMBINE {
        publishDir = [
            path: { "${params.outdir}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            pattern: "*.tsv"
        ]
    }

    withName: COUNTS_SINGLE {
        ext.when = { params.module.split(',').contains('circrna_discovery') }
        publishDir = [
            path: { "${params.outdir}/circrna_discovery/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            pattern: "*.txt"
        ]
    }

    withName: COUNTS_COMBINED {
        ext.when = { params.module.split(',').contains('circrna_discovery') }
        publishDir = [
            path: { "${params.outdir}/circrna_discovery/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            pattern: "count_matrix.txt"
        ]
    }

    withName: TARGETSCAN_DATABASE {
        ext.when = { params.module.split(',').contains('mirna_prediction') }
        publishDir = [
            path: { "${params.outdir}/references/targetscan" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            pattern: "mature.txt"
        ]
    }

    withName: TARGETSCAN {
        ext.when = { params.module.split(',').contains('mirna_prediction') }
        ext.prefix = { "${meta.id}.targetscan" }
        publishDir = [
            path: { "${params.outdir}/mirna_prediction/targetscan" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            pattern: "*.txt"
        ]
    }

    withName: MIRANDA {
        ext.when = { params.module.split(',').contains('mirna_prediction') }
        ext.prefix = { "${meta.id}.miranda" }
        ext.args = "-strict"
        publishDir = [
            path: { "${params.outdir}/mirna_prediction/miranda" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            pattern: "*.txt"
        ]
    }

    withName: MIRNA_TARGETS {
        ext.when = { params.module.split(',').contains('mirna_prediction') }
        publishDir = [
            path: { "${params.outdir}/mirna_prediction" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            pattern: "*.txt"
        ]
    }

    // DIFF EXP

    withName: HISAT2_ALIGN {
        ext.when = { params.module.split(',').contains('differential_expression') }
        ext.args = ["",
                    "--dta",
                    "--no-spliced-alignment"
                    ].join(' ').trim()
        publishDir = [
            path: { "${params.outdir}/differential_expression/intermediates/hisat2/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_intermediates,
        ]
    }

    withName: SAMTOOLS_SORT {
        ext.when = { params.module.split(',').contains('differential_expression') }
        ext.prefix = { "${meta.id}.sorted" }
        publishDir = [
            path: { "${params.outdir}/differential_expression/intermediates/hisat2/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_intermediates,
            pattern: "*.bam"
        ]
    }

    withName: STRINGTIE_STRINGTIE {
        ext.when = { params.module.split(',').contains('differential_expression') }
        ext.args = "-e"
        publishDir = [
            path: { "${params.outdir}/differential_expression/intermediates/stringtie/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_intermediates
        ]
    }

    withName: STRINGTIE_PREPDE {
        ext.when = { params.module.split(',').contains('differential_expression') }
        publishDir = [
            path: { "${params.outdir}/differential_expression/RNA-Seq/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_intermediates
        ]
    }

    withName: DESEQ2_DIFFERENTIAL_EXPRESSION {
        ext.when = { params.module.split(',').contains('differential_expression') }
        publishDir = [
            path: { "${params.outdir}/differential_expression/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: PARENT_GENE {
        ext.when = { params.module.split(',').contains('differential_expression') }
        publishDir = [
            path: { "${params.outdir}/differential_expression/circular_linear_ratio_test" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: PREPARE_CLR_TEST {
        ext.when = { params.module.split(',').contains('differential_expression') }
        publishDir = [
            path: { "${params.outdir}/differential_expression/circular_linear_ratio_test" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: CIRCTEST {
        ext.when = { params.module.split(',').contains('differential_expression') }
        publishDir = [
            path: { "${params.outdir}/differential_expression/circular_linear_ratio_test" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
}
