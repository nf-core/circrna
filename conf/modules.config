/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]

    withName: SAMPLESHEET_CHECK {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: FASTQC {
        ext.args = '--quiet'
    }

    withName: CUSTOM_DUMPSOFTWAREVERSIONS {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            pattern: '*_versions.yml'
        ]
    }

    // PREPARE GENOME
    withName: BOWTIE_BUILD {
        ext.when = { params.fasta && !params.bowtie && params.tool.contains('mapsplice') && params.module.contains('circrna_discovery') }
        publishDir = [
            path: { "${params.outdir}/genome/index/bowtie" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_reference
        ]
    }

    withName: BOWTIE2_BUILD {
        ext.when = { params.fasta && !params.bowtie && params.tool.contains('find_circ') && params.module.contains('circrna_discovery') }
        publishDir = [
            path: { "${params.outdir}/genome/index/bowtie2" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_reference
        ]
    }

    withName: HISAT2_EXTRACTSPLICESITES {
        ext.when = { params.fasta && params.gtf && ( params.module.contains('differential_expression') || params.tool.contains('ciriquant') ) }
        publishDir = [
            path: { "${params.outdir}/genome/index/hisat2" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_reference
        ]
    }

    withName: HISAT2_BUILD {
        ext.when = { params.fasta && params.gtf && ( params.module.contains('differential_expression') || params.tool.contains('ciriquant') ) }
        publishDir = [
            path: { "${params.outdir}/genome/index/hisat2" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_reference
        ]
    }

    withName: STAR_GENOMEGENERATE {
        ext.when = { params.fasta && params.gtf && !params.star && params.module.contains('circrna_discovery') && ( params.tool.contains('circexplorer2') || params.tool.contains('dcc') || params.tool.contains('circrna_finder') ) }
        ext.args = [ "",
            params.sjdboverhang ? "--sjdbOverhang ${params.sjdboverhang}" : '',
        ].join(' ').trim()
        publishDir = [
            path: { "${params.outdir}/genome/index/star" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_reference
        ]
    }

    withName: SEGEMEHL_INDEX {
        ext.when = { params.fasta && !params.segemehl && params.tool.contains('segemehl') && params.module.contains('circrna_discovery') }
        publishDir = [
            path: { "${params.outdir}/genome/index/segemehl" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_reference
        ]
    }

    // circRNA

    withName: SEGEMEHL_ALIGN {
        ext.when = { params.fasta && !params.segemehl && params.tool.contains('segemehl') && params.module.contains('circrna_discovery') }
        ext.args = [ "",
            "-b",
            "-S"
        ].join(' ').trim()
        publishDir = [
            path: { "${params.outdir}/circrna_discovery/segemehl/intermediates" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_intermediates
        ]
    }

    withName: STAR_1ST_PASS {
        ext.when = { params.module.contains('circrna_discovery') && ( params.tool.contains('circexplorer2') || params.tool.contains('dcc') || params.tool.contains('circrna_finder') ) }
        ext.args = [ "",
            "--chimOutType Junctions WithinBAM",
            "--outSAMtype BAM SortedByCoordinate",
            "--outSAMunmapped Within",
            "--outFilterType BySJout",
            "--outReadsUnmapped None",
            "--readFilesCommand zcat",
            params.alignSJDBoverhangMin ? "--alignSJDBoverhangMin ${params.alignSJDBoverhangMin}" : "",
            params.chimJunctionOverhangMin ? "--chimJunctionOverhangMin ${params.chimJunctionOverhangMin}" : "",
            params.chimSegmentMin ? "--chimSegmentMin ${params.chimSegmentMin}" :  ""
        ].join(' ').trim()
        publishDir = [
            path: { "${params.outdir}/circrna_discovery/star/1st_pass" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_intermediates
        ]
    }

    withName: STAR_2ND_PASS {
        ext.when = { params.module.contains('circrna_discovery') && ( params.tool.contains('circexplorer2') || params.tool.contains('dcc') || params.tool.contains('circrna_finder') ) }
        ext.args = [ "",
            "--chimOutType Junctions WithinBAM",
            "--outSAMtype BAM SortedByCoordinate",
            "--outSAMunmapped Within",
            "--outFilterType BySJout",
            "--outReadsUnmapped None",
            "--readFilesCommand zcat",
            "--sjdbFileChrStartEnd $gtf",
            params.alignSJDBoverhangMin ? "--alignSJDBoverhangMin ${params.alignSJDBoverhangMin}" : "--alignSJDBoverhangMin 10",
            params.chimJunctionOverhangMin ? "--chimJunctionOverhangMin ${params.chimJunctionOverhangMin}" : "--chimJunctionOverhangMin 10",
            params.chimSegmentMin ? "--chimSegmentMin ${params.chimSegmentMin}" :  "--chimSegmentMin 10"
        ].join(' ').trim()
        publishDir = [
            path: { "${params.outdir}/circrna_discovery/star/2nd_pass" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_intermediates
        ]
    }

    withName: ANNOTATION {
        publishDir = [
            path: { "${params.outdir}/circrna_discovery/${meta.tool}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

}
